{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\nexport default {\n  __name: 'TimeButton',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const toggleTimeDropdown = ref(false);\n    const time = ref('00:00');\n    const errorTime = ref(false);\n    const errorClass = 'bg-red-500 text-white border border-red-500 hover:bg-red-600 hover:border-red-600';\n    const times = ['00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30'];\n\n    // Watch validater\n    watch(time, () => validateTime());\n    const validateTime = () => {\n      errorTime.value = false;\n      let inputTime = time.value;\n      const regex = /^([0-9][0-9]:[0-9][0-9]$)/;\n      const valid = regex.exec(inputTime);\n      console.log(valid);\n      if (valid === null) {\n        // Seperator checker\n        inputTime = inputTime.replace('.', ':');\n        inputTime = inputTime.replace(',', ':');\n\n        // Remove all text\n        inputTime = inputTime.replace(/([a-zA-Z])/, '0');\n        inputTime = setCharAt(inputTime, 2, ':');\n\n        // Max length 5\n        if (inputTime.includes(':')) {\n          inputTime = inputTime.substring(0, 5);\n        }\n\n        // Not found set the error\n        errorTime.value = true;\n      }\n      console.log(toggleTimeDropdown.value);\n\n      // If empty and not active\n      if (!inputTime && !toggleTimeDropdown.value) {\n        inputTime = '00:00';\n      }\n      return time.value = inputTime;\n    };\n    const hideTimeDropdown = () => {\n      toggleTimeDropdown.value = false;\n    };\n    const setCharAt = (str, index, chr) => {\n      if (index > str.length - 1) return str;\n      return str.substring(0, index) + chr + str.substring(index + 1);\n    };\n    const __returned__ = {\n      toggleTimeDropdown,\n      time,\n      errorTime,\n      errorClass,\n      times,\n      validateTime,\n      hideTimeDropdown,\n      setCharAt,\n      computed,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"AAiBA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;;;;;;;IAExC,MAAMC,kBAAkB,GAAGF,GAAG,CAAC,KAAK,CAAC;IACrC,MAAMG,IAAI,GAAGH,GAAG,CAAC,OAAO,CAAC;IACzB,MAAMI,SAAS,GAAGJ,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMK,UAAU,GAAG,mFAAmF;IAEtG,MAAMC,KAAK,GAAG,CACV,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CACnK;;IAED;IACAL,KAAK,CAACE,IAAI,EAAE,MAAMI,YAAY,EAAE,CAAC;IAEjC,MAAMA,YAAY,GAAG,MAAM;MACzBH,SAAS,CAACI,KAAK,GAAG,KAAK;MACvB,IAAIC,SAAS,GAAGN,IAAI,CAACK,KAAK;MAC1B,MAAME,KAAK,GAAG,2BAA2B;MACzC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACH,SAAS,CAAC;MAEnCI,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAElB,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClB;QACAF,SAAS,GAAGA,SAAS,CAACM,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;QACvCN,SAAS,GAAGA,SAAS,CAACM,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;;QAEvC;QACAN,SAAS,GAAGA,SAAS,CAACM,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;QAEhDN,SAAS,GAAGO,SAAS,CAACP,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC;;QAExC;QACA,IAAIA,SAAS,CAACQ,QAAQ,CAAC,GAAG,CAAC,EAAE;UAC3BR,SAAS,GAAGA,SAAS,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QACvC;;QAEA;QACAd,SAAS,CAACI,KAAK,GAAG,IAAI;MACxB;MAEAK,OAAO,CAACC,GAAG,CAACZ,kBAAkB,CAACM,KAAK,CAAC;;MAErC;MACA,IAAI,CAACC,SAAS,IAAI,CAACP,kBAAkB,CAACM,KAAK,EAAE;QAC3CC,SAAS,GAAG,OAAO;MACrB;MAEA,OAAON,IAAI,CAACK,KAAK,GAAGC,SAAS;IAC/B,CAAC;IAED,MAAMU,gBAAgB,GAAG,MAAM;MAC7BjB,kBAAkB,CAACM,KAAK,GAAG,KAAK;IAClC,CAAC;IAED,MAAMQ,SAAS,GAAG,CAACI,GAAG,EAACC,KAAK,EAACC,GAAG,KAAK;MACrC,IAAGD,KAAK,GAAGD,GAAG,CAACG,MAAM,GAAC,CAAC,EAAE,OAAOH,GAAG;MACnC,OAAOA,GAAG,CAACF,SAAS,CAAC,CAAC,EAACG,KAAK,CAAC,GAAGC,GAAG,GAAGF,GAAG,CAACF,SAAS,CAACG,KAAK,GAAC,CAAC,CAAC;IAC9D,CAAC","names":["computed","ref","watch","toggleTimeDropdown","time","errorTime","errorClass","times","validateTime","value","inputTime","regex","valid","exec","console","log","replace","setCharAt","includes","substring","hideTimeDropdown","str","index","chr","length"],"sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/components/Task/TimeButton.vue"],"sourcesContent":["<template>\n  <div class=\"relative\">\n    <button @click=\"toggleTimeDropdown = !toggleTimeDropdown\" class=\"w-full rounded-md shadow py-2 pl-3 font-inter text-left text-sm font-medium flex items-center hover-transition group\" :class=\"toggleTimeDropdown ? ( !errorTime ? 'text-white bg-primary-Darker border border-primary-Darker1' : errorClass) : ( !errorTime ? 'bg-gray-100 border border-gray-100 hover:bg-primary hover:border-primary hover:text-white' : errorClass)\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" class=\"w-6 h-6 mr-2\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n      <input type=\"text\" v-model=\"time\" class=\"focus:outline-none w-10 bg-transparent group-hover:text-white\" :class=\"toggleTimeDropdown ? 'text-white' : ( !errorTime ? 'text-black' : 'text-white')\">\n    </button>\n    <div class=\"absolute shadow-md bg-gray-100 w-[150px] l font-inter text-sm mt-5 rounded hover-transition\" v-click-outside=\"hideTimeDropdown\" v-if=\"toggleTimeDropdown\">\n      <div class=\"w-0 h-0 border-[15px] absolute top-0 -mt-7 ml-2 border-l-transparent border-r-transparent border-t-transparent border-b-gray-100\"></div>\n      <div class=\"max-h-[200px] overflow-y-scroll z-[20] relative border-t-2 border-gray-100\">\n        <div class=\"border-b border-gray-200 px-2 py-[5px] leading-none hover-transition hover:bg-primary hover:text-white cursor-pointer\" v-for=\"time in times\">{{ time }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport { computed, ref, watch } from \"vue\";\n\n  const toggleTimeDropdown = ref(false);\n  const time = ref('00:00');\n  const errorTime = ref(false);\n  const errorClass = 'bg-red-500 text-white border border-red-500 hover:bg-red-600 hover:border-red-600';\n\n  const times = [\n      '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30'\n  ];\n\n  // Watch validater\n  watch(time, () => validateTime());\n\n  const validateTime = () => {\n    errorTime.value = false;\n    let inputTime = time.value;\n    const regex = /^([0-9][0-9]:[0-9][0-9]$)/;\n    const valid = regex.exec(inputTime);\n\n    console.log(valid);\n\n    if (valid === null) {\n      // Seperator checker\n      inputTime = inputTime.replace('.', ':');\n      inputTime = inputTime.replace(',', ':');\n\n      // Remove all text\n      inputTime = inputTime.replace(/([a-zA-Z])/, '0');\n\n      inputTime = setCharAt(inputTime, 2, ':');\n\n      // Max length 5\n      if (inputTime.includes(':')) {\n        inputTime = inputTime.substring(0, 5);\n      }\n\n      // Not found set the error\n      errorTime.value = true;\n    }\n\n    console.log(toggleTimeDropdown.value);\n\n    // If empty and not active\n    if (!inputTime && !toggleTimeDropdown.value) {\n      inputTime = '00:00'\n    }\n\n    return time.value = inputTime;\n  }\n\n  const hideTimeDropdown = () => {\n    toggleTimeDropdown.value = false;\n  }\n\n  const setCharAt = (str,index,chr) => {\n  if(index > str.length-1) return str;\n  return str.substring(0,index) + chr + str.substring(index+1);\n}\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}