{"ast":null,"code":"import { ref, watch } from \"vue\";\nexport default {\n  __name: 'TimeButton',\n  emits: ['time'],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const toggleTimeDropdown = ref(false);\n    const timeInputValue = ref('00:00');\n    const errorTime = ref(false);\n    const errorClass = 'bg-red-500 text-white border border-red-500 hover:bg-red-600 hover:border-red-600';\n    const times = ['00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30', '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30'];\n\n    // Watch validater\n    watch(timeInputValue, () => {\n      validateTime();\n    });\n    const validateTime = () => {\n      errorTime.value = false;\n      let inputTime = timeInputValue.value;\n      const regex = /^([0-9][0-9]:[0-9][0-9]$)/;\n      const valid = regex.exec(inputTime);\n      if (valid === null) {\n        // Seperator checker\n        inputTime = inputTime.replace('.', ':');\n        inputTime = inputTime.replace(',', ':');\n\n        // Remove all text\n        inputTime = inputTime.replace(/[^0-9]/g, '0');\n\n        // If not includes the seperator add it\n        if (!inputTime.includes(':')) {\n          inputTime = setCharAt(inputTime, 2, ':');\n        }\n\n        // Max length 5\n        if (inputTime.includes(':')) {\n          inputTime = inputTime.substring(0, 5);\n        }\n\n        // Not found set the error\n        errorTime.value = true;\n      }\n      return timeInputValue.value = inputTime;\n    };\n    const fillRestTime = () => {\n      if (!timeInputValue.value) {\n        timeInputValue.value = '00:00';\n      }\n      if (timeInputValue.value) {\n        switch (timeInputValue.value.length) {\n          case 1:\n            timeInputValue.value += '0:00';\n            break;\n          case 2:\n            timeInputValue.value += ':00';\n            break;\n          case 3:\n            timeInputValue.value += '00';\n            break;\n          case 4:\n            timeInputValue.value += '0';\n            break;\n        }\n      }\n      emit('time', timeInputValue.value);\n    };\n    const hideTimeDropdown = () => {\n      fillRestTime();\n      toggleTimeDropdown.value = false;\n    };\n    const setCharAt = (str, index, chr) => {\n      if (index > str.length - 1) return str;\n      return str.substring(0, index) + chr + str.substring(index + 1);\n    };\n    const __returned__ = {\n      toggleTimeDropdown,\n      timeInputValue,\n      errorTime,\n      errorClass,\n      emit,\n      times,\n      validateTime,\n      fillRestTime,\n      hideTimeDropdown,\n      setCharAt,\n      ref,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["ref","watch","toggleTimeDropdown","timeInputValue","errorTime","errorClass","times","validateTime","value","inputTime","regex","valid","exec","replace","includes","setCharAt","substring","fillRestTime","length","emit","hideTimeDropdown","str","index","chr"],"sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/components/Task/TimeButton.vue"],"sourcesContent":["<template>\n  <div class=\"relative\">\n    <button @click=\"toggleTimeDropdown = !toggleTimeDropdown; fillRestTime()\" class=\"w-full rounded-md shadow py-[7px] pl-2 font-inter text-left text-[14px] font-medium flex items-center hover-transition group\" :class=\"toggleTimeDropdown ? ( !errorTime ? 'text-white bg-primary-Darker border border-primary-Darker1' : errorClass) : ( !errorTime ? 'bg-gray-100 border border-gray-100 hover:bg-primary hover:border-primary hover:text-white' : errorClass)\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" class=\"w-5 h-5 mr-2\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n      <input type=\"text\" v-model=\"timeInputValue\" ref=\"timeInput\" class=\"focus:outline-none w-10 bg-transparent group-hover:text-white\" :class=\"toggleTimeDropdown ? 'text-white' : ( !errorTime ? 'text-black' : 'text-white')\">\n    </button>\n    <div class=\"absolute shadow-md bg-gray-50 border border-gray-100 w-[150px] l font-inter text-sm font-medium mt-5 rounded hover-transition z-20\" v-click-outside=\"hideTimeDropdown\" v-if=\"toggleTimeDropdown\">\n      <div class=\"w-0 h-0 border-[15px] absolute top-0 -mt-7 ml-2 border-l-transparent border-r-transparent border-t-transparent border-b-gray-100\"></div>\n      <div class=\"max-h-[200px] overflow-y-scroll z-[20] relative border-t-2 border-gray-100\">\n        <div class=\"border-b border-gray-200 px-2 py-[7.5px] leading-none hover-transition cursor-pointer\" :class=\"timeInputValue === time ? 'bg-primary text-white' : 'hover:bg-primary hover:text-white '\" @click=\"toggleTimeDropdown = false; timeInputValue = time; $emit('time', time);\" v-for=\"time in times\">{{ time }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport { ref, watch } from \"vue\";\n\n  const toggleTimeDropdown = ref(false);\n  const timeInputValue = ref('00:00');\n  const errorTime = ref(false);\n  const errorClass = 'bg-red-500 text-white border border-red-500 hover:bg-red-600 hover:border-red-600';\n  const emit = defineEmits(['time']);\n\n  const times = [\n    '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30',\n    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',\n    '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30'\n  ];\n\n  // Watch validater\n  watch(timeInputValue, () => {\n    validateTime();\n  });\n\n  const validateTime = () => {\n    errorTime.value = false;\n    let inputTime = timeInputValue.value;\n    const regex = /^([0-9][0-9]:[0-9][0-9]$)/;\n    const valid = regex.exec(inputTime);\n\n    if (valid === null) {\n      // Seperator checker\n      inputTime = inputTime.replace('.', ':');\n      inputTime = inputTime.replace(',', ':');\n\n      // Remove all text\n      inputTime = inputTime.replace(/[^0-9]/g, '0');\n\n      // If not includes the seperator add it\n      if (!inputTime.includes(':')) {\n        inputTime = setCharAt(inputTime, 2, ':');\n      }\n\n      // Max length 5\n      if (inputTime.includes(':')) {\n        inputTime = inputTime.substring(0, 5);\n      }\n\n      // Not found set the error\n      errorTime.value = true;\n    }\n\n    return timeInputValue.value = inputTime;\n  }\n\n  const fillRestTime = () => {\n    if (!timeInputValue.value) {\n      timeInputValue.value = '00:00';\n    }\n\n    if (timeInputValue.value) {\n      switch (timeInputValue.value.length) {\n        case 1:\n          timeInputValue.value += '0:00'\n          break;\n        case 2:\n          timeInputValue.value += ':00'\n          break;\n        case 3:\n          timeInputValue.value += '00'\n          break;\n        case 4:\n          timeInputValue.value += '0'\n          break;\n      }\n    }\n\n    emit('time', timeInputValue.value);\n  }\n\n  const hideTimeDropdown = () => {\n    fillRestTime();\n    toggleTimeDropdown.value = false;\n  }\n\n  const setCharAt = (str,index,chr) => {\n    if(index > str.length-1) return str;\n    return str.substring(0,index) + chr + str.substring(index+1);\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}