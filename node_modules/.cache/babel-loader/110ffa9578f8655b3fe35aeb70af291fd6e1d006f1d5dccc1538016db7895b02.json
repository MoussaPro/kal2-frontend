{"ast":null,"code":"export default function dateHandler() {\n  // const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  // const dateFormat = 'd-m-yy';\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateLocale = 'da-DK';\n  const dateToTimestamp = date => {\n    const dateInit = new Date(date);\n    console.log(dateInit.getMonth());\n    return Date.UTC(dateInit.getFullYear(), dateInit.getMonth(), dateInit.getDate());\n  };\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {\n        weekday: 'long'\n      });\n    } else {\n      return date.getDate();\n    }\n  };\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth() + 1;\n    }\n  };\n  const getYear = timestamp => {\n    const date = new Date(timestamp * 1000);\n    return date.getFullYear();\n  };\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + date.getFullYear();\n  };\n  const isToday = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n    return date.toLocaleDateString(dateLocale) === today.toLocaleDateString(dateLocale);\n  };\n  const dateCalender = dateParser => {\n    return new Date(dateParser).toLocaleDateString(dateLocale, {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replaceAll('.', '/').slice(0, 5);\n  };\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    dateCalender,\n    dateToTimestamp\n  };\n}","map":{"version":3,"names":["dateHandler","monthNames","dateLocale","dateToTimestamp","date","dateInit","Date","console","log","getMonth","UTC","getFullYear","getDate","getDay","timestamp","format","toLocaleDateString","weekday","getYear","seperator","slice","isToday","today","dateCalender","dateParser","year","month","day","replaceAll"],"sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/composables/dateHandler.js"],"sourcesContent":["export default function dateHandler() {\n  // const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  // const dateFormat = 'd-m-yy';\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateLocale = 'da-DK';\n\n  const dateToTimestamp = (date) => {\n    const dateInit = new Date(date);\n    console.log(dateInit.getMonth());\n    return Date.UTC(dateInit.getFullYear(), dateInit.getMonth(), dateInit.getDate());\n  }\n\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {weekday: 'long'});\n    } else {\n      return date.getDate();\n    }\n  }\n\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth()+1;\n    }\n  }\n\n  const getYear = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n\n    return date.getFullYear();\n  }\n\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth()+1)).slice(-2) + '/' + date.getFullYear();\n  }\n\n  const isToday = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n\n    return date.toLocaleDateString(dateLocale) === today.toLocaleDateString(dateLocale);\n  }\n\n  const dateCalender = (dateParser) => {\n    return new Date(dateParser).toLocaleDateString(dateLocale, {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replaceAll('.', '/').slice(0, 5);\n  }\n\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    dateCalender,\n    dateToTimestamp\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}