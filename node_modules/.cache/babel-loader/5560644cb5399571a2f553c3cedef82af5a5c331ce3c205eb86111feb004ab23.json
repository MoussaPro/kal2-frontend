{"ast":null,"code":"export default function dateHandler() {\n  const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateFormat = 'd-m-yy';\n  const dateLocale = 'da-DK';\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {\n        weekday: 'long'\n      });\n    } else {\n      return date.getDate();\n    }\n  };\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth() + 1;\n    }\n  };\n  const getYear = timestamp => {\n    const date = new Date(timestamp * 1000);\n    return date.getFullYear();\n  };\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n    if (seperator) {\n      return date.toLocaleDateString(dateLocale).replaceAll('.', seperator);\n    } else {\n      return date.toLocaleDateString(dateLocale);\n    }\n  };\n  const isToday = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n    return date.toLocaleDateString(dateLocale, {\n      weekday: 'long'\n    }) === today.toLocaleDateString(dateLocale, {\n      weekday: 'long'\n    });\n  };\n  const timeCalender = time => {\n    return time.splice(0, 5);\n  };\n  const dateCalender = dateParser => {\n    const date = new Date(dateParser);\n    console.log(date);\n    return date;\n  };\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    timeCalender,\n    dateCalender\n  };\n}","map":{"version":3,"names":["dateHandler","dayNames","monthNames","dateFormat","dateLocale","getDay","timestamp","format","date","Date","toLocaleDateString","weekday","getDate","getMonth","getYear","getFullYear","seperator","replaceAll","isToday","today","timeCalender","time","splice","dateCalender","dateParser","console","log"],"sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/composables/dateHandler.js"],"sourcesContent":["export default function dateHandler() {\n  const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateFormat = 'd-m-yy';\n  const dateLocale = 'da-DK';\n\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {weekday: 'long'});\n    } else {\n      return date.getDate();\n    }\n\n  }\n\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth()+1;\n    }\n  }\n\n  const getYear = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n\n    return date.getFullYear();\n  }\n\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n\n    if (seperator) {\n      return date.toLocaleDateString(dateLocale).replaceAll('.', seperator);\n    } else {\n      return date.toLocaleDateString(dateLocale);\n    }\n  }\n\n  const isToday = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n\n    return date.toLocaleDateString(dateLocale, {weekday: 'long'}) === today.toLocaleDateString(dateLocale, {weekday: 'long'});\n  }\n\n  const timeCalender = (time) => {\n    return time.splice(0, 5);\n  }\n\n  const dateCalender = (dateParser) => {\n    const date = new Date(dateParser);\n\n      console.log(date);\n    return date;\n  }\n\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    timeCalender,\n    dateCalender\n  }\n}"],"mappings":"AAAA,eAAe,SAASA,WAAW,GAAG;EACpC,MAAMC,QAAQ,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;EACzF,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC;EAC3I,MAAMC,UAAU,GAAG,QAAQ;EAC3B,MAAMC,UAAU,GAAG,OAAO;EAE1B,MAAMC,MAAM,GAAG,CAACC,SAAS,EAAEC,MAAM,KAAK;IACpC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;IAEvC,IAAIC,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOC,IAAI,CAACE,kBAAkB,CAACN,UAAU,EAAE;QAACO,OAAO,EAAE;MAAM,CAAC,CAAC;IAC/D,CAAC,MAAM;MACL,OAAOH,IAAI,CAACI,OAAO,EAAE;IACvB;EAEF,CAAC;EAED,MAAMC,QAAQ,GAAG,CAACP,SAAS,EAAEC,MAAM,KAAK;IACtC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;IAEvC,IAAIC,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOL,UAAU,CAACM,IAAI,CAACK,QAAQ,EAAE,CAAC;IACpC,CAAC,MAAM;MACL,OAAOL,IAAI,CAACK,QAAQ,EAAE,GAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMC,OAAO,GAAIR,SAAS,IAAK;IAC7B,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;IAEvC,OAAOE,IAAI,CAACO,WAAW,EAAE;EAC3B,CAAC;EAED,MAAMH,OAAO,GAAG,CAACN,SAAS,EAAEU,SAAS,KAAK;IACxC,MAAMR,IAAI,GAAG,IAAIC,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;IAEvC,IAAIU,SAAS,EAAE;MACb,OAAOR,IAAI,CAACE,kBAAkB,CAACN,UAAU,CAAC,CAACa,UAAU,CAAC,GAAG,EAAED,SAAS,CAAC;IACvE,CAAC,MAAM;MACL,OAAOR,IAAI,CAACE,kBAAkB,CAACN,UAAU,CAAC;IAC5C;EACF,CAAC;EAED,MAAMc,OAAO,GAAIZ,SAAS,IAAK;IAC7B,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;IACvC,MAAMa,KAAK,GAAG,IAAIV,IAAI,EAAE;IAExB,OAAOD,IAAI,CAACE,kBAAkB,CAACN,UAAU,EAAE;MAACO,OAAO,EAAE;IAAM,CAAC,CAAC,KAAKQ,KAAK,CAACT,kBAAkB,CAACN,UAAU,EAAE;MAACO,OAAO,EAAE;IAAM,CAAC,CAAC;EAC3H,CAAC;EAED,MAAMS,YAAY,GAAIC,IAAI,IAAK;IAC7B,OAAOA,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAIC,UAAU,IAAK;IACnC,MAAMhB,IAAI,GAAG,IAAIC,IAAI,CAACe,UAAU,CAAC;IAE/BC,OAAO,CAACC,GAAG,CAAClB,IAAI,CAAC;IACnB,OAAOA,IAAI;EACb,CAAC;EAED,OAAO;IACLH,MAAM;IACNQ,QAAQ;IACRC,OAAO;IACPF,OAAO;IACPM,OAAO;IACPE,YAAY;IACZG;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}