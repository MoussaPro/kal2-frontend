{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"border rounded-md h-full flex flex-col justify-between text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75 bg-primary-Darker text-white border-primary font-bold\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"line-clamp-1 -mx-[2px]\"\n};\nconst _hoisted_3 = {\n  class: \"inline mx-[2px] font-medium\"\n};\nconst _hoisted_4 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.task.moreTask ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createTextVNode(_toDisplayString($props.task.title) + \" \", 1 /* TEXT */), $props.task.moreTask ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.task.tasks, (task, index) => {\n    return _openBlock(), _createElementBlock(\"p\", _hoisted_3, \"#\" + _toDisplayString(task.id), 1 /* TEXT */);\n  }), 256 /* UNKEYED_FRAGMENT */)), _ctx.index !== $props.task.tasks.length - 1 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \", \")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: _normalizeClass([\"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\", $props.task.task_color]),\n    style: _normalizeStyle($setup.styling)\n  }, _toDisplayString($props.task.title), 7 /* TEXT, CLASS, STYLE */));\n}","map":{"version":3,"mappings":";;;EAC4BA,KAAK,EAAC;;;;EAEzBA,KAAK,EAAC;;;EACNA,KAAK,EAAC;AAA6B;;;;;SAH/BC,WAAI,CAACC,QAAQ,kBAAxBC,oBAMM,OANNC,UAMM,qCALDH,WAAI,CAACI,KAAK,IAAG,GAChB,iBAA0CJ,WAAI,CAACC,QAAQ,kBAAvDC,oBAGM,OAHNG,UAGM,sBAFJH,oBAA6FI,6BAA9BN,WAAI,CAACO,KAAK,GAA1BC,IAAI,EAAEC,KAAK;yBAA1DP,oBAA6F,KAA7FQ,UAA6F,EAAlB,GAAC,oBAAGF,IAAI,CAACG,EAAE;oCAC1EC,UAAK,KAAKZ,WAAI,CAACO,KAAK,CAACM,MAAM,sBAAvCX,oBAAsD,oBAAT,IAAE,kGAInDA,oBAEM;;IAFMH,KAAK,mBAAC,2GAA2G,EAASC,WAAI,CAACc,UAAU;IAAGC,KAAK,kBAAEC,cAAO;sBACjKhB,WAAI,CAACI,KAAK","names":["class","$props","moreTask","_createElementBlock","_hoisted_1","title","_hoisted_2","_Fragment","tasks","task","index","_hoisted_3","id","_ctx","length","task_color","style","$setup"],"sourceRoot":"","sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/components/Calendar/Week/Task.vue"],"sourcesContent":["<template>\n  <div v-if=\"task.moreTask\" class=\"border rounded-md h-full flex flex-col justify-between text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75 bg-primary-Darker text-white border-primary font-bold\">\n    {{ task.title }}\n    <div class=\"line-clamp-1 -mx-[2px]\" v-if=\"task.moreTask\">\n      <p class=\"inline mx-[2px] font-medium\" v-for=\"(task, index) in task.tasks\">#{{ task.id }}</p>\n      <span v-if=\"index !== task.tasks.length - 1\">, </span>\n    </div>\n  </div>\n\n  <div v-else class=\"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\" :class=\"task.task_color\" :style=\"styling\">\n    {{ task.title }}\n  </div>\n</template>\n\n<script setup>\n  import timeHandler from \"@/composables/timeHandler\";\n  import { ref } from \"vue\";\n  import colorHandler from \"@/composables/colorHandler\";\n\n  const props = defineProps({\n    task: {\n      type: Object,\n      required: true\n    }\n  });\n\n  const { taskHeight, diffBetweenTwoTimes } = timeHandler();\n  const { getTaskColors } = colorHandler();\n\n  const calculateHeight = (start, end) => {\n    const diff = diffBetweenTwoTimes(start, end, 'minutes');\n    return diff*taskHeight.minute;\n  }\n\n  const styling = ref('');\n\n  if (!props.task.moreTask) {\n    const color = ref(getTaskColors(props.task.task_color));\n    styling.value = \"height: \" + calculateHeight(props.task.task_time, props.task.task_time_end) + \"px;\";\n    styling.value += \" margin-top:\" + (props.task.diff / 60) * taskHeight.hour + \"px;\";\n    styling.value += \" background-color:\" + color.value['background'] + \";\";\n    styling.value += \" color:\" + color.value['text'] + \";\";\n    styling.value += \" border-color:\" + color.value['border'] + \";\";\n    styling.value += \" z-index:\" + props.task.task_time.slice(0, 2) + \";\";\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}