{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"line-clamp-1 flex -mx-[2px]\"\n};\nconst _hoisted_2 = {\n  class: \"inline mx-[2px] font-medium\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.task.moreTask ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass([\"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\", $props.task.task_color]),\n    style: _normalizeStyle($setup.styling)\n  }, [_createTextVNode(_toDisplayString($props.task.title) + \" \", 1 /* TEXT */), $props.task.moreTask ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.task.tasks, task => {\n    return _openBlock(), _createElementBlock(\"p\", _hoisted_2, \"#\" + _toDisplayString(task.id) + \" |\", 1 /* TEXT */);\n  }), 256 /* UNKEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)], 6 /* CLASS, STYLE */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($props.task.title), 1 /* TEXT */));\n}","map":{"version":3,"mappings":";;;EAGSA,KAAK,EAAC;;;EACNA,KAAK,EAAC;AAA6B;;;EAG9BA,KAAK,EAAC;;;SANPC,WAAI,CAACC,QAAQ,kBAAxBC,oBAKM;;IALoBH,KAAK,mBAAC,2GAA2G,EAASC,WAAI,CAACG,UAAU;IAAGC,KAAK,kBAAEC,cAAO;wCAC/KL,WAAI,CAACM,KAAK,IAAG,GAChB,iBAA+CN,WAAI,CAACC,QAAQ,kBAA5DC,oBAEM,OAFNK,UAEM,sBADJL,oBAAsFM,6BAAhCR,WAAI,CAACS,KAAK,EAAlBC,IAAI;yBAAlDR,oBAAsF,KAAtFS,UAAsF,EAApB,GAAC,oBAAGD,IAAI,CAACE,EAAE,IAAG,IAAE;oHAGtFV,oBAEM,OAFNW,UAEM,mBADDb,WAAI,CAACM,KAAK","names":["class","$props","moreTask","_createElementBlock","task_color","style","$setup","title","_hoisted_1","_Fragment","tasks","task","_hoisted_2","id","_hoisted_3"],"sourceRoot":"","sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/components/Calendar/Week/Task.vue"],"sourcesContent":["<template>\n  <div v-if=\"task.moreTask\" class=\"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\" :class=\"task.task_color\" :style=\"styling\">\n    {{ task.title }}\n    <div class=\"line-clamp-1 flex -mx-[2px]\" v-if=\"task.moreTask\">\n      <p class=\"inline mx-[2px] font-medium\" v-for=\"task in task.tasks\">#{{ task.id }} |</p>\n    </div>\n  </div>\n  <div v-else class=\"border rounded-md text-xs px-2 py-[2px] font-inter shadow relative z-50 hover-transition hover:opacity-75\">\n    {{ task.title }}\n  </div>\n</template>\n\n<script setup>\n  import timeHandler from \"@/composables/timeHandler\";\n  import { ref } from \"vue\";\n  import colorHandler from \"@/composables/colorHandler\";\n\n  const props = defineProps({\n    task: {\n      type: Object,\n      required: true\n    }\n  });\n\n  const { taskHeight, diffBetweenTwoTimes } = timeHandler();\n  const { getTaskColors } = colorHandler();\n\n  const calculateHeight = (start, end) => {\n    const diff = diffBetweenTwoTimes(start, end, 'minutes');\n    return diff*taskHeight.minute;\n  }\n\n  const styling = ref('');\n\n  if (!props.task.moreTask) {\n    const color = ref(getTaskColors(props.task.task_color));\n    styling.value = \"height: \"+calculateHeight(props.task.task_time, props.task.task_time_end)+\"px;\";\n    styling.value += \" margin-top:\"+(props.task.diff/60)*taskHeight.hour+\"px;\";\n    styling.value += \" background-color:\"+color.value['background']+\";\";\n    styling.value += \" color:\"+color.value['text']+\";\";\n    styling.value += \" border-color:\"+color.value['border']+\";\";\n    styling.value += \" z-index:\"+props.task.task_time.slice(0, 2)+\";\";\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}