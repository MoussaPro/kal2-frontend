{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, resolveDirective as _resolveDirective, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"relative\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  fill: \"none\",\n  viewBox: \"0 0 24 24\",\n  \"stroke-width\": \"2\",\n  stroke: \"currentColor\",\n  class: \"w-[16px] mr-1\"\n}, [/*#__PURE__*/_createElementVNode(\"path\", {\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\",\n  d: \"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\"\n})], -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"absolute shadow-md bg-gray-50 border border-gray-100 w-[150px] l font-inter text-sm font-medium mt-5 rounded hover-transition z-20\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"w-0 h-0 border-[15px] absolute top-0 -mt-7 ml-2 border-l-transparent border-r-transparent border-t-transparent border-b-gray-100\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"max-h-[200px] overflow-y-scroll z-[20] relative border-t-2 border-gray-100\"\n};\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _directive_click_outside = _resolveDirective(\"click-outside\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => {\n      $setup.toggleTimeDropdown = !$setup.toggleTimeDropdown;\n      $setup.fillRestTime();\n    }),\n    class: _normalizeClass([\"w-full rounded-md shadow py-[7px] pl-2 font-inter text-left text-[14px] font-medium flex items-center hover-transition group\", $setup.toggleTimeDropdown ? !$setup.errorTime ? 'text-white bg-primary-Darker border border-primary-Darker1' : $setup.errorClass : !$setup.errorTime ? 'bg-gray-100 border border-gray-100 hover:bg-primary hover:border-primary hover:text-white' : $setup.errorClass])\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.timeInputValue = $event),\n    ref: \"timeInput\",\n    class: _normalizeClass([\"focus:outline-none w-10 bg-transparent group-hover:text-white\", $setup.toggleTimeDropdown ? 'text-white' : !$setup.errorTime ? 'text-black' : 'text-white'])\n  }, null, 2 /* CLASS */), [[_vModelText, $setup.timeInputValue]])], 2 /* CLASS */), $setup.toggleTimeDropdown ? _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList($setup.times, time => {\n    return _createElementVNode(\"div\", {\n      class: _normalizeClass([\"border-b border-gray-200 px-2 py-[7.5px] leading-none hover-transition cursor-pointer\", $setup.timeInputValue === time ? 'bg-primary text-white' : 'hover:bg-primary hover:text-white ']),\n      onClick: $event => {\n        $setup.toggleTimeDropdown = false;\n        $setup.timeInputValue = time;\n        _ctx.$emit('time', time);\n      }\n    }, _toDisplayString(time), 11 /* TEXT, CLASS, PROPS */, _hoisted_6);\n  }), 64 /* STABLE_FRAGMENT */))])])), [[_directive_click_outside, $setup.hideTimeDropdown]]) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAU;gCAEjBC,oBAEM;EAFDC,KAAK,EAAC,4BAA4B;EAACC,IAAI,EAAC,MAAM;EAACC,OAAO,EAAC,WAAW;EAAC,cAAY,EAAC,GAAG;EAACC,MAAM,EAAC,cAAc;EAACL,KAAK,EAAC;iBACnHC,oBAAyG;EAAnG,gBAAc,EAAC,OAAO;EAAC,iBAAe,EAAC,OAAO;EAACK,CAAC,EAAC;;;;EAItDN,KAAK,EAAC;;gCACTC,oBAAoJ;EAA/ID,KAAK,EAAC;AAAkI;;EACxIA,KAAK,EAAC;AAA4E;;;;uBAT3FO,oBAaM,OAbNC,UAaM,GAZJP,oBAKS;IALAQ,OAAK;MAAEC,yBAAkB,IAAIA,yBAAkB;MAAEA,mBAAY;IAAA;IAAIV,KAAK,mBAAC,8HAA8H,EAASU,yBAAkB,IAAMA,gBAAS,kEAAkEA,iBAAU,IAAOA,gBAAS,iGAAiGA,iBAAU;MAC7bC,UAEM,kBACNV,oBAA2N;IAApNW,IAAI,EAAC,MAAM;+DAAUF,qBAAc;IAAEG,GAAG,EAAC,WAAW;IAACb,KAAK,mBAAC,+DAA+D,EAASU,yBAAkB,mBAAqBA,gBAAS;0CAA9JA,qBAAc,sBAE6IA,yBAAkB,kCAA3MH,oBAKM,OALNO,UAKM,GAJJC,UAAoJ,EACpJd,oBAEM,OAFNe,UAEM,kBADJT,oBAA4TU,6BAAvBP,YAAK,EAAbQ,IAAI;WAAjSjB,oBAA4T;MAAvTD,KAAK,mBAAC,uFAAuF,EAASU,qBAAc,KAAKQ,IAAI;MAAoET,OAAK;QAAEC,yBAAkB;QAAUA,qBAAc,GAAGQ,IAAI;QAAEC,UAAK,SAASD,IAAI;MAAA;wBAA6BA,IAAI;mEAHtJR,uBAAgB","names":["class","_createElementVNode","xmlns","fill","viewBox","stroke","d","_createElementBlock","_hoisted_1","onClick","$setup","_hoisted_2","type","ref","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","time","_ctx"],"sourceRoot":"","sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/components/Task/TimeButton.vue"],"sourcesContent":["<template>\n  <div class=\"relative\">\n    <button @click=\"toggleTimeDropdown = !toggleTimeDropdown; fillRestTime()\" class=\"w-full rounded-md shadow py-[7px] pl-2 font-inter text-left text-[14px] font-medium flex items-center hover-transition group\" :class=\"toggleTimeDropdown ? ( !errorTime ? 'text-white bg-primary-Darker border border-primary-Darker1' : errorClass) : ( !errorTime ? 'bg-gray-100 border border-gray-100 hover:bg-primary hover:border-primary hover:text-white' : errorClass)\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" class=\"w-[16px] mr-1\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n      <input type=\"text\" v-model=\"timeInputValue\" ref=\"timeInput\" class=\"focus:outline-none w-10 bg-transparent group-hover:text-white\" :class=\"toggleTimeDropdown ? 'text-white' : ( !errorTime ? 'text-black' : 'text-white')\">\n    </button>\n    <div class=\"absolute shadow-md bg-gray-50 border border-gray-100 w-[150px] l font-inter text-sm font-medium mt-5 rounded hover-transition z-20\" v-click-outside=\"hideTimeDropdown\" v-if=\"toggleTimeDropdown\">\n      <div class=\"w-0 h-0 border-[15px] absolute top-0 -mt-7 ml-2 border-l-transparent border-r-transparent border-t-transparent border-b-gray-100\"></div>\n      <div class=\"max-h-[200px] overflow-y-scroll z-[20] relative border-t-2 border-gray-100\">\n        <div class=\"border-b border-gray-200 px-2 py-[7.5px] leading-none hover-transition cursor-pointer\" :class=\"timeInputValue === time ? 'bg-primary text-white' : 'hover:bg-primary hover:text-white '\" @click=\"toggleTimeDropdown = false; timeInputValue = time; $emit('time', time);\" v-for=\"time in times\">{{ time }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n<script setup>\nimport { ref, watch } from \"vue\";\n\n  const toggleTimeDropdown = ref(false);\n  const timeInputValue = ref('00:00');\n  const errorTime = ref(false);\n  const errorClass = 'bg-red-500 text-white border border-red-500 hover:bg-red-600 hover:border-red-600';\n  const emit = defineEmits(['time']);\n\n  const times = [\n    '00:00', '00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00', '04:30', '05:00', '05:30', '06:00', '06:30', '07:00', '07:30', '08:00', '08:30',\n    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00', '17:30',\n    '18:00', '18:30', '19:00', '19:30', '20:00', '20:30', '21:00', '21:30', '22:00', '22:30', '23:00', '23:30'\n  ];\n\n  // Watch validater\n  watch(timeInputValue, () => {\n    validateTime();\n  });\n\n  const validateTime = () => {\n    errorTime.value = false;\n    let inputTime = timeInputValue.value;\n    const regex = /^([0-9][0-9]:[0-9][0-9]$)/;\n    const valid = regex.exec(inputTime);\n\n    if (valid === null) {\n      // Seperator checker\n      inputTime = inputTime.replace('.', ':');\n      inputTime = inputTime.replace(',', ':');\n\n      // Remove all text\n      inputTime = inputTime.replace(/[^0-9]/g, '0');\n\n      // If not includes the seperator add it\n      if (!inputTime.includes(':')) {\n        inputTime = setCharAt(inputTime, 2, ':');\n      }\n\n      // Max length 5\n      if (inputTime.includes(':')) {\n        inputTime = inputTime.substring(0, 5);\n      }\n\n      // Not found set the error\n      errorTime.value = true;\n    }\n\n    return timeInputValue.value = inputTime;\n  }\n\n  const fillRestTime = () => {\n    if (!timeInputValue.value) {\n      timeInputValue.value = '00:00';\n    }\n\n    if (timeInputValue.value) {\n      switch (timeInputValue.value.length) {\n        case 1:\n          timeInputValue.value += '0:00'\n          break;\n        case 2:\n          timeInputValue.value += ':00'\n          break;\n        case 3:\n          timeInputValue.value += '00'\n          break;\n        case 4:\n          timeInputValue.value += '0'\n          break;\n      }\n    }\n\n    emit('time', timeInputValue.value);\n  }\n\n  const hideTimeDropdown = () => {\n    fillRestTime();\n    toggleTimeDropdown.value = false;\n  }\n\n  const setCharAt = (str,index,chr) => {\n    if(index > str.length-1) return str;\n    return str.substring(0,index) + chr + str.substring(index+1);\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}