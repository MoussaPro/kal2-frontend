{"ast":null,"code":"export default function dateHandler() {\n  // const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  // const dateFormat = 'd-m-yy';\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateLocale = 'da-DK';\n  const dateToTimestamp = date => {\n    date = new Date(date).getTime();\n    console.log(date.toLocaleString('da-DK'));\n  };\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {\n        weekday: 'long'\n      });\n    } else {\n      return date.getDate();\n    }\n  };\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth() + 1;\n    }\n  };\n  const getYear = timestamp => {\n    const date = new Date(timestamp * 1000);\n    return date.getFullYear();\n  };\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth() + 1)).slice(-2) + '/' + date.getFullYear();\n  };\n  const isToday = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n    return date.toLocaleDateString(dateLocale) === today.toLocaleDateString(dateLocale);\n  };\n  const dateCalender = dateParser => {\n    return new Date(dateParser).toLocaleDateString(dateLocale, {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replaceAll('.', '/').slice(0, 5);\n  };\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    dateCalender,\n    dateToTimestamp\n  };\n}","map":{"version":3,"names":["dateHandler","monthNames","dateLocale","dateToTimestamp","date","Date","getTime","console","log","toLocaleString","getDay","timestamp","format","toLocaleDateString","weekday","getDate","getMonth","getYear","getFullYear","seperator","slice","isToday","today","dateCalender","dateParser","year","month","day","replaceAll"],"sources":["/Users/khaled.el-moussa/Desktop/Projekter/Kal2/frontend/src/composables/dateHandler.js"],"sourcesContent":["export default function dateHandler() {\n  // const dayNames = ['Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag', 'Søndag'];\n  // const dateFormat = 'd-m-yy';\n  const monthNames = ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Oktober', 'September', 'November', 'December'];\n  const dateLocale = 'da-DK';\n\n  const dateToTimestamp = (date) => {\n    date = new Date(date).getTime();\n    console.log(date.toLocaleString('da-DK'));\n  }\n\n  const getDay = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return date.toLocaleDateString(dateLocale, {weekday: 'long'});\n    } else {\n      return date.getDate();\n    }\n  }\n\n  const getMonth = (timestamp, format) => {\n    const date = new Date(timestamp * 1000);\n\n    if (format === 'name') {\n      return monthNames[date.getMonth()];\n    } else {\n      return date.getMonth()+1;\n    }\n  }\n\n  const getYear = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n\n    return date.getFullYear();\n  }\n\n  const getDate = (timestamp, seperator) => {\n    const date = new Date(timestamp * 1000);\n\n    return ('0' + date.getDate()).slice(-2) + '/' + ('0' + (date.getMonth()+1)).slice(-2) + '/' + date.getFullYear();\n  }\n\n  const isToday = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n    const today = new Date();\n\n    return date.toLocaleDateString(dateLocale) === today.toLocaleDateString(dateLocale);\n  }\n\n  const dateCalender = (dateParser) => {\n    return new Date(dateParser).toLocaleDateString(dateLocale, {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    }).replaceAll('.', '/').slice(0, 5);\n  }\n\n  return {\n    getDay,\n    getMonth,\n    getYear,\n    getDate,\n    isToday,\n    dateCalender,\n    dateToTimestamp\n  }\n}"],"mappings":"AAAA,eAAe,SAASA,WAAW,GAAG;EACpC;EACA;EACA,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC;EAC3I,MAAMC,UAAU,GAAG,OAAO;EAE1B,MAAMC,eAAe,GAAIC,IAAI,IAAK;IAChCA,IAAI,GAAG,IAAIC,IAAI,CAACD,IAAI,CAAC,CAACE,OAAO,EAAE;IAC/BC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACK,cAAc,CAAC,OAAO,CAAC,CAAC;EAC3C,CAAC;EAED,MAAMC,MAAM,GAAG,CAACC,SAAS,EAAEC,MAAM,KAAK;IACpC,MAAMR,IAAI,GAAG,IAAIC,IAAI,CAACM,SAAS,GAAG,IAAI,CAAC;IAEvC,IAAIC,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOR,IAAI,CAACS,kBAAkB,CAACX,UAAU,EAAE;QAACY,OAAO,EAAE;MAAM,CAAC,CAAC;IAC/D,CAAC,MAAM;MACL,OAAOV,IAAI,CAACW,OAAO,EAAE;IACvB;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,CAACL,SAAS,EAAEC,MAAM,KAAK;IACtC,MAAMR,IAAI,GAAG,IAAIC,IAAI,CAACM,SAAS,GAAG,IAAI,CAAC;IAEvC,IAAIC,MAAM,KAAK,MAAM,EAAE;MACrB,OAAOX,UAAU,CAACG,IAAI,CAACY,QAAQ,EAAE,CAAC;IACpC,CAAC,MAAM;MACL,OAAOZ,IAAI,CAACY,QAAQ,EAAE,GAAC,CAAC;IAC1B;EACF,CAAC;EAED,MAAMC,OAAO,GAAIN,SAAS,IAAK;IAC7B,MAAMP,IAAI,GAAG,IAAIC,IAAI,CAACM,SAAS,GAAG,IAAI,CAAC;IAEvC,OAAOP,IAAI,CAACc,WAAW,EAAE;EAC3B,CAAC;EAED,MAAMH,OAAO,GAAG,CAACJ,SAAS,EAAEQ,SAAS,KAAK;IACxC,MAAMf,IAAI,GAAG,IAAIC,IAAI,CAACM,SAAS,GAAG,IAAI,CAAC;IAEvC,OAAO,CAAC,GAAG,GAAGP,IAAI,CAACW,OAAO,EAAE,EAAEK,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAIhB,IAAI,CAACY,QAAQ,EAAE,GAAC,CAAC,CAAC,EAAEI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGhB,IAAI,CAACc,WAAW,EAAE;EAClH,CAAC;EAED,MAAMG,OAAO,GAAIV,SAAS,IAAK;IAC7B,MAAMP,IAAI,GAAG,IAAIC,IAAI,CAACM,SAAS,GAAG,IAAI,CAAC;IACvC,MAAMW,KAAK,GAAG,IAAIjB,IAAI,EAAE;IAExB,OAAOD,IAAI,CAACS,kBAAkB,CAACX,UAAU,CAAC,KAAKoB,KAAK,CAACT,kBAAkB,CAACX,UAAU,CAAC;EACrF,CAAC;EAED,MAAMqB,YAAY,GAAIC,UAAU,IAAK;IACnC,OAAO,IAAInB,IAAI,CAACmB,UAAU,CAAC,CAACX,kBAAkB,CAACX,UAAU,EAAE;MACzDuB,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE;IACP,CAAC,CAAC,CAACC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAACR,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACrC,CAAC;EAED,OAAO;IACLV,MAAM;IACNM,QAAQ;IACRC,OAAO;IACPF,OAAO;IACPM,OAAO;IACPE,YAAY;IACZpB;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}